////////////////////////////////////////////////////////////////////////////////
// Filename: light.ps
////////////////////////////////////////////////////////////////////////////////

#include "BRDF.ps"
#include "common.vs"

/////////////
// GLOBALS //
/////////////
Texture2D g_texAlbedo : register(t0);
Texture2D g_texNormal : register(t1);
Texture2D g_texHeight : register(t2);
Texture2D g_texGIM : register(t3); // r - gloss, g - ior, b - metall
TextureCube g_texCube : register(t5);


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
	float3 tangent : TANGENT0;
	float3 binormal : BINORMAL0;
	float3 worldPosition : TEXCOORD1;
};


float4 gaussian_blur( float3 TextureCoordinate )
{
	float Pixels[13] = { -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6 };

	float BlurWeights[13] = { 0.002216, 0.008764, 0.026995, 0.064759, 0.120985, 0.176033, 0.199471, 0.176033, 0.120985, 0.064759, 0.026995, 0.008764, 0.002216 };
	
	// Pixel width
    float pixelWidth = 1.0 / 256.0f;

    float4 color = { 0, 0, 0, 1 };

    float3 blur;
    blur = TextureCoordinate;

    for( int i = 0; i < 13; i++ ) 
    {
        blur.x = TextureCoordinate.x + Pixels[i] * pixelWidth;
        color += g_texCube.SampleLevel( g_SamplerLinearClamp, blur, 0.0 ) * BlurWeights[i];
    }  

    return color;
}

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 main(PixelInputType input) : SV_TARGET
{
	float4 FinalLight = (float4)0;
	
	float depthValue = input.position.z / input.position.w;
	
	//return float4( clamp_range( 0.06, 0.062, depthValue ), 1.0, 1.0, 1.0 );
	
	float3 v = normalize( cb_cameraPosition - input.worldPosition );
	
	
	//float parallax_range = clamp_range( 0.07, 0.075, depthValue );
	//if( parallax_range < 1.0 )
	//{
	//	float2 tex_with_offset = input.tex + calc_parallax_offset( v, input.normal, input.tangent, input.tex, g_texHeight, g_SamplerLinearWrap );
	//	input.tex = lerp( tex_with_offset, input.tex, parallax_range );
	//}
	
    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
    float4 albedo = g_texAlbedo.Sample( g_SamplerAnisotropicClamp, input.tex );
	float3 gim = g_texGIM.Sample( g_SamplerAnisotropicClamp, input.tex ).rgb;	
	float gloss = gim.r;
	float ior = gim.g;
	float metal = gim.b;
	
	//float3 n = normalize( input.normal );	
	float3 n = normalize( 2.0 * g_texNormal.Sample( g_SamplerPointWrap, input.tex ).rgb - 1.0 );	
	float3x3 tbn_matrix = float3x3( normalize( input.tangent ), normalize( input.binormal ), normalize( input.normal ) );	
	n = normalize( mul( n, tbn_matrix ) );
	
		
	// Sample the environment map
    float3 vReflect = -reflect( v, n );
	
    float3 vEnvironment = g_texCube.SampleLevel( g_SamplerLinearClamp, vReflect, 9 - ( gloss * 10 ) ).rgb * 0.1;
	
	
	
	//Gaussian blur
	//vEnvironment = gaussian_blur( vReflect ).rgb;
	
	//v = normalize( mul( v, tbn_matrix ) );
	
	float shadow_percent = 1.0;
	//float shadow_percent = CalculatePCFPercentLit ( float4( input.worldPosition, 1.0 ) );
	//float shadow_percent = csm_shadow( float4( input.worldPosition, 1.0 ), cb_CSM_count );
	float NdotV = max( 0.0f, dot( n, v ) );	
	
	float3 sum_direct_specular = (float3)0;
	float3 sum_direct_diffuse = (float3)0;
	float3 sum_light_color = (float3)0;
	
	if( cb_light_count == 0 )
		return float4( 1.0, 0.0, 0.0, 1.0 );
	
	float3 l;
	float fade;
	float3 shadow_coords;
	float shadow_texel = 0.0f;
	float3 h;
	float NdotH;
	float NdotL;
	float HdotV;
	//shadow_percent = 0.0;
	
    for( uint i = 0; i < cb_light_count; i++ )
	{
		//shadow_texel = ((float[4])(cb_shadow_texel[i/4]))[i%4];
		
		//shadow_percent = 1.0f;
		
		//shadow_percent = CalculatePCFPercentLit( i, float4( input.worldPosition, 1.0 ), 0.00001f, shadow_texel );
				
		if( cb_lightPos[i].w < 1.0 )
		{
			l = normalize( cb_lightPos[i].xyz );
			fade = 1.0;
		}
		else 
		{
			l = ( cb_lightPos[i].xyz - input.worldPosition );
			float dist = length( l );
			l = normalize( l );
			fade = 1.0 / ( dist * dist );
			/*
			if( cb_lightPos[i].w == 2.0 )			
			{
				//float alpha;
				//alpha = dot( -l, normalize( cb_lightDir[i].xyz ) );

				//if( alpha < 1 - cb_lightDir[i].w * 0.0625 )
				//	fade = 0.0;
				float2 proj_coord = projectionCoords( float4( input.worldPosition, 1.0 ), i );
				
				if( ( saturate( proj_coord.x ) != proj_coord.x ) || ( saturate( proj_coord.y ) != proj_coord.y ) )
				{
					fade = 0.0f;
				}
				else
				{
					fade *= g_txProjTexture[i].Sample( g_SamplerLinearClamp, proj_coord ).x;
				}
				
				//float theta = dot(cb_lightPos[i].xyz, -cb_lightDir[i].xyz);
				//float epsilon = 0.91 - 0.82;
				//fade = clamp((theta - 0.82) / epsilon, 0.0, 1.0);  
			}*/
		}
		
		
		
		if( fade < 0.00001 )
			continue;
		
		h = normalize( l + v );
		
		NdotH = max( 0.0f, dot( n, h ) );
		NdotL = max( 0.0f, dot( n, l ) );
		HdotV = max( 0.0f, dot( h, v ) );
		
		if( metal > 0.1 )			
		{
			sum_direct_specular += max( 0, ( D_GGX( 1.0 - gloss, NdotH ) * G_Smith( 1.0 - gloss, NdotV, NdotL ) * float3( F_Schlick( albedo.r, HdotV ), F_Schlick( albedo.g, HdotV ), F_Schlick( albedo.b, HdotV ) ) ) / ( 4.0 * NdotL * NdotV ) );			
			//sum_direct_diffuse += ( max( dot( n, l ), 0.0f ) / PI );
		}
		else
		{
			sum_direct_specular += max( 0, ( D_GGX( 1.0 - gloss, NdotH ) * G_Smith( 1.0 - gloss, NdotV, NdotL ) * F_Schlick( 0.03, HdotV ) ) / ( 4.0 * NdotL * NdotV ) );
			sum_direct_diffuse += ( max( dot( n, l ), 0.0f ) / PI );
		}
		
		
		sum_light_color += cb_lightColor[i].rgb * fade * shadow_percent;
		
		
	}
	
	
	
	if( metal > 0.1 )
		FinalLight.rgb = ( sum_direct_specular ) * sum_light_color + ( float3( F_Schlick( albedo.r, NdotV ), F_Schlick( albedo.g, NdotV ), F_Schlick( albedo.b, NdotV ) ) * vEnvironment );
	else
		FinalLight.rgb = ( sum_direct_diffuse + sum_direct_specular ) * sum_light_color * albedo.rgb + ( F_Schlick( 0.03, NdotV ) * vEnvironment * albedo.rgb );
	
	//FinalLight.rgb = saturate( FinalLight.rgb );
	
	FinalLight.a = 1.0f;
	#ifdef TEST
		FinalLight.rgb = 1.0f;
	#endif
	
	return FinalLight;
}


