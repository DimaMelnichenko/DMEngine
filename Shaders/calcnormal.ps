////////////////////////////////////////////////////////////////////////////////
// Filename: texture.ps
////////////////////////////////////////////////////////////////////////////////

/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture;
SamplerState SampleType;

static const float textureSize = 1024.0f;
static const float texel_size = 1.0f/textureSize; //size of one texel;
static const float normalStrength = 8;
static const float heightMultipler = 1.0f;

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};

float4 ComputeNormals( float2 uv )
{
	
    float3  l = float3( -1,  0, abs( shaderTexture.Sample( SampleType, uv + texel_size * float2(-1,  0) ).x ) );   // left    
    float3  t = float3(  0, -1, abs( shaderTexture.Sample( SampleType, uv + texel_size * float2( 0, -1) ).x ) );   // top
    float3  b = float3(  0,  1, abs( shaderTexture.Sample( SampleType, uv + texel_size * float2( 0,  1) ).x ) );   // bottom    
    float3  r = float3(  1,  0, abs( shaderTexture.Sample( SampleType, uv + texel_size * float2( 1,  0) ).x ) );   // right
    
	float3 v1 = normalize( cross( r, t ) );
	float3 v2 = normalize( cross( b, l ) );
	
	//v1 = v1 + v2;
	
	float4 N = float4( normalize( v2 ), 1 );
	
	//float tmp = N.z;
	//N.z = N.y;
	//N.y = tmp;
	
	N.a = 1.0f;
	
	return N;
}

float4 ComputeNormalsPS_DM( float2 uv )
{	
    float tl = abs( shaderTexture.Sample( SampleType, uv + texel_size * float2(-1, -1) ).x * heightMultipler );   // top left
    float  l = abs( shaderTexture.Sample( SampleType, uv + texel_size * float2(-1,  0) ).x * heightMultipler );   // left
    float bl = abs( shaderTexture.Sample( SampleType, uv + texel_size * float2(-1,  1) ).x * heightMultipler );   // bottom left
    float  t = abs( shaderTexture.Sample( SampleType, uv + texel_size * float2( 0, -1) ).x * heightMultipler );   // top
    float  b = abs( shaderTexture.Sample( SampleType, uv + texel_size * float2( 0,  1) ).x * heightMultipler );   // bottom
    float tr = abs( shaderTexture.Sample( SampleType, uv + texel_size * float2( 1, -1) ).x * heightMultipler );   // top right
    float  r = abs( shaderTexture.Sample( SampleType, uv + texel_size * float2( 1,  0) ).x * heightMultipler );   // right
    float br = abs( shaderTexture.Sample( SampleType, uv + texel_size * float2( 1,  1) ).x * heightMultipler );   // bottom right
	
    // Compute dx using Sobel:
    //           -1 0 1 
    //           -2 0 2
    //           -1 0 1

    float dX = tr + 2 * r + br -tl - 2 * l - bl; 

    // Compute dy using Sobel:
    //           -1 -2 -1 
    //            0  0  0
    //            1  2  1
	
    float dY = bl + 2 * b + br -tl - 2 * t - tr;

    // Build the normalized normal

    float4 N = float4( normalize( float3( dX, 1.0f / normalStrength, dY ) ), 1.0f );

    //convert (-1.0 , 1.0) to (0.0 , 1.0), if needed
	
	//float tmp = N.z;
	//N.z = N.y;
	//N.y = tmp;
	
    return N * 0.5f + 0.5f;

}

float4 ComputeNormalsPS( float2 uv )
{
    float tl = abs( shaderTexture.Sample( SampleType, uv + texel_size * float2(-1, -1)).x);   // top left
    float  l = abs( shaderTexture.Sample( SampleType, uv + texel_size * float2(-1,  0)).x);   // left
    float bl = abs( shaderTexture.Sample( SampleType, uv + texel_size * float2(-1,  1)).x);   // bottom left
    float  t = abs( shaderTexture.Sample( SampleType, uv + texel_size * float2( 0, -1)).x);   // top
    float  b = abs( shaderTexture.Sample( SampleType, uv + texel_size * float2( 0,  1)).x);   // bottom
    float tr = abs( shaderTexture.Sample( SampleType, uv + texel_size * float2( 1, -1)).x);   // top right
    float  r = abs( shaderTexture.Sample( SampleType, uv + texel_size * float2( 1,  0)).x);   // right
    float br = abs( shaderTexture.Sample( SampleType, uv + texel_size * float2( 1,  1)).x);   // bottom right
 

    // Compute dx using Sobel:
    //           -1 0 1 
    //           -2 0 2
    //           -1 0 1

    float dX = tr + 2*r + br -tl - 2*l - bl; 

    // Compute dy using Sobel:
    //           -1 -2 -1 
    //            0  0  0
    //            1  2  1

    float dY = bl + 2*b + br -tl - 2*t - tr; 

    // Build the normalized normal

    float4 N = float4(normalize(float3(-dX, -dY, 1.0f / normalStrength)), 1.0f);

    //convert (-1.0 , 1.0) to (0.0 , 1.0), if needed

    return N * 0.5f + 0.5f;

}

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 main(PixelInputType input) : SV_TARGET
{
    float4 textureColor;
	
    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
    textureColor = ComputeNormalsPS( input.tex );
	
	//textureColor = shaderTexture.Sample( SampleType, input.tex );

    return textureColor;
}