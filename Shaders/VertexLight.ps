////////////////////////////////////////////////////////////////////////////////
// Filename: light.ps
////////////////////////////////////////////////////////////////////////////////

#include "common.vs"
#include "samplers.sh"
//#include "CommonLight.ps"

/////////////
// GLOBALS //
/////////////

cbuffer ConstantVertexLightPS: register( b2 )
{
	float4 cb_TintColor;
	float4 cb_AmbientColor;
}

Texture2D g_texAlbedo : register(t0);

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float4 color : COLOR0; 
};

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 main(PixelInputType input) : SV_TARGET
{	
	float4 finalLight = (float4)0;
	
    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
    float4 albedo = g_texAlbedo.Sample( g_SamplerLinearWrap, input.tex * float2(1.0,1.0) ) * cb_TintColor;
	
	float4 light = input.color;
	light += cb_AmbientColor;
	finalLight = albedo * light;
	finalLight.a = step( 0.9, albedo.a );
	
	return finalLight;
}