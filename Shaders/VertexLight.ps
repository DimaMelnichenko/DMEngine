////////////////////////////////////////////////////////////////////////////////
// Filename: light.ps
////////////////////////////////////////////////////////////////////////////////

#include "common.vs"
#include "samplers.sh"
//#include "CommonLight.ps"

/////////////
// GLOBALS //
/////////////

cbuffer ConstantVertexLightPS: register( b2 )
{
	float4 cb_TintColor;
	float4 cb_AmbientColor;
	float4 blendFactor;
}

Texture2D g_texAlbedo : register(t0);
Texture2D g_texGroundColor : register(t1);

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float4 color : COLOR0; 
	float3 worldPosition : WORLDPOS0;
};

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 main(PixelInputType input) : SV_TARGET
{	
	float4 finalLight = (float4)0;
	
    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
    float4 albedo = g_texAlbedo.Sample( g_SamplerLinearWrap, input.tex );
	float4 groundColor = g_texGroundColor.Sample( g_SamplerLinearWrap, input.worldPosition.xz * ( 1.0 / 4096.0 ) );
	
	//float4 light = input.color;
	//light += cb_AmbientColor;
	finalLight = albedo * lerp( cb_TintColor, groundColor, blendFactor.r ) + cb_AmbientColor;
	finalLight.a = step( 0.9, albedo.a );
	
	return finalLight;
}