////////////////////////////////////////////////////////////////////////////////
// Filename: light.ps
////////////////////////////////////////////////////////////////////////////////

#include "common.vs"
#include "CommonLight.ps"

/////////////
// GLOBALS //
/////////////
Texture2D g_texAlbedo : register(t0);
Texture2D g_texNormal : register(t1);
Texture2D g_texShiness : register(t2);


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
	float3 tangent : TANGENT0;
	float3 binormal : BINORMAL0;
	float3 worldPosition : TEXCOORD1;
};

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 main(PixelInputType input) : SV_TARGET
{
	//return float4( cb_lightCount, 0.0, 0.0, 0.0 );
	
	float4 finalLight = (float4)0;
	
	float3 v = normalize( cb_cameraPosition - input.worldPosition );
	
    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
    float4 albedo = g_texAlbedo.Sample( g_SamplerAnisotropicWrap, input.tex );
	
	float kShininess = g_texShiness.Sample( g_SamplerLinearWrap, input.tex ).b * 1.0;

#ifndef NO_NORMAL	
	float3 n = normalize( 2.0 * g_texNormal.Sample( g_SamplerLinearWrap, input.tex ).rgb - 1.0 );	
	float3x3 tbn_matrix = float3x3( normalize( input.tangent ), normalize( input.binormal ), normalize( input.normal ) );	
	n = normalize( mul( n, tbn_matrix ) );
#else
	float3 n = normalize( input.normal );
#endif	
	
	
	float metallic = 0.1;
	float3 F0;
    F0 = albedo.xyz * metallic;
    albedo.xyz *= (1.0 - metallic);
	
	//finalLight.rgb = albedo.rgb *  D_BlinnPhongAllLights( n, v, input.worldPosition );
	finalLight.rgb = CookTorrance_GGX_all_light( n, v, F0, albedo.rgb, 1.0, input.worldPosition );
	
	finalLight.a = albedo.a;
	
#ifdef ALPHA_TO_COVERAGE
	finalLight.a = step( 0.9, albedo.a );
#endif

#ifdef TEST
	finalLight.rgb = 1.0f;
#endif
	
	return finalLight;
}