////////////////////////////////////////////////////////////////////////////////
// Filename: texture.ps
////////////////////////////////////////////////////////////////////////////////

#include "samplers.sh"
#include "noise.sh"

/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture;

//////////////
// TYPEDEFS //
//////////////

cbuffer Application : register(b10)
{
	float3 cb_cameraPosition;
	float app_time;
};

struct PixelInputType
{
    float4 position : SV_POSITION; 
	float2 uv: TEXCOORD;
};

//// helper functions

float pulse( float a, float b, float x )
{
	return ( step(a,x) - step(b,x) );
}

float bias(float b, float x)
{
	return pow( x, log(b) / log(0.5) );
}

float gain( float g, float x )
{
	if( x < 0.5 )
		return bias( 1.0f - g, 2.0f * x ) / 2.0f;
	else
		return 1.0 - bias( 1.0f - g, 2.0f * x ) / 2.0f;
}

float boxstep( float a, float b, float x )
{
	return clamp( (x - a) / ( b - a ), 0.0, 1.0 );
}

float fractalsum( float2 uv, float f )
{
	float t = -.5;
	for( ; f <= 1024.0 / 12.0 ; f *= 2 ) // W = Image width in pixels
	{
		t += PerlinNoise2D( uv, f ) / f;
	}
	return t;
}

float turbulence( float2 uv, float f )
{
	float t = -.5;
	for( ; f <= 1024.0 / 12.0 ; f *= 2 ) // W = Image width in pixels
	{
		t += abs( PerlinNoise2D( uv, f ) ) / f;
	}
	return t;
}

////////////////////////////////////////////////////////////////////////////////
//  procedural textures

float brick( float2 uv )
{
	const float BRICKWIDTH = 0.25;
	const float BRICKHEIGHT = 0.08;
	const float MORTARTHICKNESS = 0.01;
	const float BMWIDTH = (BRICKWIDTH+MORTARTHICKNESS);
	const float BMHEIGHT = (BRICKHEIGHT+MORTARTHICKNESS);
	const float MWF = (MORTARTHICKNESS*0.5/BMWIDTH);
	const float MHF = (MORTARTHICKNESS*0.5/BMHEIGHT);
	
	if( fmod( uv.y * 0.5, 1 ) > 0.5 )
		uv.x += 0.5f;
	
	float2 stbrick = floor( uv );
	uv -= stbrick;
	
	float w = step( MWF, uv.x ) - step( 1.0 - MWF, uv.x );
	float h = step( MHF, uv.y ) - step( 1.0 - MHF, uv.y );
	
	return lerp( 1.0, 0.0, w * h );
}

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 main(PixelInputType input) : SV_TARGET
{
    float4 color = (float4)0;
	
	color.rgb = saturate( PerlinNoise3D( float3( input.uv * 10.5, app_time * 0.0001 ), 3 ) * ( PerlinNoise3D( float3( input.uv * 2.5, app_time * 0.00001 ), 1 ) - 0.5 ) * 2.5 );
	//color.rgb = -0.1 * turbulence( input.uv * 2.0, 1 ); 
	
	color.a = 1.0f;
	
    return color;
}