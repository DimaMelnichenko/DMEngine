////////////////////////////////////////////////////////////////////////////////
// Filename: light.ps
////////////////////////////////////////////////////////////////////////////////

#include "samplers.sh"
#include "common.vs"

/////////////
// GLOBALS //
/////////////
Texture2D g_texAlbedo : register(t0);
Texture2D g_texNormal : register(t1);
Texture2D g_texHeight : register(t2);
Texture2D g_texGIM : register(t3); // r - gloss, g - ior, b - metall
TextureCube g_texCube : register(t5);

static const float PI = 3.1415926535897932384626433832795;

struct Material
{
	float4 albedo;
	float4 fresnel_gloss;
};

StructuredBuffer<Material> instanceParams: register(t16);


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
	float3 tangent : TANGENT0;
	float3 binormal : BINORMAL0;
	float3 worldPosition : TEXCOORD1;
	uint instaceIndex : SV_InstanceID;
};

float GGX_PartialGeometry( float cosThetaN, float alpha ) 
{
    float cosTheta_sqr = saturate( cosThetaN * cosThetaN );
    float tan2 = ( 1.0f - cosTheta_sqr ) / cosTheta_sqr;
    float GP = 2.0f / ( 1.0f + sqrt( 1.0f + alpha * alpha * tan2 ) );
    return GP;
}

float GGX_Distribution( float cosThetaNH, float alpha ) 
{
    float alpha2 = alpha * alpha;
    float NH_sqr = saturate( cosThetaNH * cosThetaNH );
    float den = NH_sqr * alpha2 + ( 1.0f - NH_sqr );
    return alpha2 / ( PI * den * den );
}

float3 FresnelSchlick(float3 F0, float cosTheta) 
{
    return F0 + (1.0 - F0) * pow(1.0 - saturate(cosTheta), 5.0);
}

float3 CookTorrance_GGX(float3 n, float3 l, float3 v, Material m) 
{
    n = normalize(n);
    v = normalize(v);
    l = normalize(l);
    float3 h = normalize( v + l );
    //precompute dots
	
    float NL = dot(n, l);
    if( NL <= 0.0 )
		return 0.0;
	
    float NV = dot(n, v);	
    if( NV <= 0.0 )
		return 0.0;
	
    float NH = dot( n, h );
    float HV = dot( h, v );
    
    //precompute roughness square
    float roug_sqr = m.fresnel_gloss.w * m.fresnel_gloss.w;
    
    //calc coefficients
    float G = GGX_PartialGeometry( NV, roug_sqr ) * GGX_PartialGeometry( NL, roug_sqr );
    float D = GGX_Distribution( NH, roug_sqr );
    float3 F = FresnelSchlick( m.fresnel_gloss.rgb, HV );
    
    //mix
    float3 specK = G * D * F * 0.25 / ( NV + 0.001 );
    float3 diffK = saturate( 1.0 - F );
    return max(0.0, m.albedo.rgb * diffK * NL / PI + specK);
}

#define MaxSamplesCount 1024
static const float uSamplesCount = 32;
float4 uHammersleyPts[MaxSamplesCount];

float ComputeLOD_AParam()
{
    float w, h;
    g_texCube.GetDimensions( w, h );
    return 0.5 * log2( w * h / uSamplesCount );
}

float ComputeLOD(float AParam, float pdf, float3 l) 
{
    float du = 2.0*1.2*(abs(l.z)+1.0);
    return max(0.0, AParam-0.5*log2(pdf*du*du)+1.0);
}

float3x3 GetSampleTransform(float3 Normal) 
{
	float3x3 w;
	float3 up = abs(Normal.y) < 0.999 ? float3(0,1,0) : float3(1,0,0);
	w[0] = normalize ( cross( up, Normal ) );
	w[1] = cross( Normal, w[0] );
	w[2] = Normal;
	return w;
}

float3 GGX_Sample(float2 E, float alpha) 
{
    float Phi = 2.0*PI*E.x;
    float cosThetha = saturate(sqrt( (1.0 - E.y) / (1.0 + alpha*alpha * E.y - E.y) ));
    float sinThetha = sqrt( 1.0 - cosThetha*cosThetha);
    return float3(sinThetha*cos(Phi), sinThetha*sin(Phi), cosThetha);
}

float3 CookTorrance_GGX_sample(float3 n, float3 l, float3 v, float3 h, float3 f0, float roughness, out float3 FK, out float pdf)
{
    pdf = 0.0;
    FK = 0.0;
//    n = normalize(n);
//    v = normalize(v);
//    l = normalize(l);
//    float3 h = normalize(v+l);
    //precompute dots
    float NL = dot(n, l);
    if (NL <= 0.0) return 0.0;
    float NV = dot(n, v);
    if (NV <= 0.0) return 0.0;
    float NH = dot(n, h);
    float HV = dot(h, v);
    
    //precompute roughness square
    float roug_sqr = roughness * roughness;
    
    //calc coefficients
    float G = GGX_PartialGeometry(NV, roug_sqr) * GGX_PartialGeometry(NL, roug_sqr);
    float3 F = FresnelSchlick(f0, HV);
    FK = F;
    
    float D = GGX_Distribution(NH, roug_sqr);
    pdf = D*NH/(4.0*HV);

    float3 specK = G*F*HV/(NV*NH);
    return max(float3(0,0,0), specK);
}


float3 CookTorrance_GGX_sampled(float3 n, float3 v, float3 F0, float3 albedo, float roughness) 
{
    float3 Out = 0.0;
    float3x3 HTransform = GetSampleTransform(n);
    
    float LOD_Aparam = ComputeLOD_AParam();
    
    float3 specColor = 0.0;
    float3 FK_summ = 0.0;
    for (uint i=0; i<(uint)uSamplesCount; i++)
	{
        float3 H = GGX_Sample(uHammersleyPts[i].xy, roughness*roughness);
        H = mul(H, HTransform);
        float3 LightDir = reflect(-v, H);

        float3 specK;
        float pdf;
        float3 FK;
        specK = CookTorrance_GGX_sample(n, LightDir, v, H, F0, roughness, FK, pdf);
        FK_summ += FK;
        float LOD = ComputeLOD(LOD_Aparam, pdf, LightDir);
        float3 LightColor = g_texCube.SampleLevel( g_SamplerLinearWrap, mul(LightDir.xyz, (float3x3)cb_viewInverseMatrix), LOD).rgb;
        specColor += specK * LightColor;
    }
    specColor /= uSamplesCount;
    FK_summ /= uSamplesCount;
    float3 LightColor = g_texCube.SampleLevel( g_SamplerLinearWrap, mul(n, (float3x3)cb_viewInverseMatrix), 6 ).rgb;
    return albedo*saturate(1.0-FK_summ)*LightColor + specColor;
}

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 main(PixelInputType input) : SV_Target
{
	float4 FinalLight = (float4)1.0f;
	
	float3 V = normalize( cb_cameraPosition - input.worldPosition );
	float3 N = normalize(input.normal);
	float3 L = normalize(float3( -1.0f, 0.0f, 0.0f ));
	
	FinalLight.rgb = CookTorrance_GGX( N, L, V, instanceParams[input.instaceIndex] );
	
	/*FinalLight.rgb += CookTorrance_GGX_sampled( N, V, instanceParams[input.instaceIndex].fresnel_gloss.xyz, instanceParams[input.instaceIndex].albedo.xyz,	
										instanceParams[input.instaceIndex].fresnel_gloss.w );
	*/
	//if( FinalLight.r > 1.000003 ) 
	//	FinalLight.gb = 0.0;
	
	return FinalLight;
}


